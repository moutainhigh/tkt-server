<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE generatorConfiguration
        PUBLIC "-//mybatis.org//DTD MyBatis Generator Configuration 1.0//EN"
        "http://mybatis.org/dtd/mybatis-generator-config_1_0.dtd">

<generatorConfiguration>
    <classPathEntry
            location="/Users/johnathon/Devtools/apache-maven-3.5.2/repository/mysql/mysql-connector-java/5.1.46/mysql-connector-java-5.1.46.jar"/>

    <context id="MyBatis" targetRuntime="MyBatis3" defaultModelType="flat">
        <property name="autoDelimitKeywords" value="false"/>
        <!-- 生成的Java文件的编码 -->
        <property name="javaFileEncoding" value="UTF-8"/>
        <!-- 格式化Java代码 -->
        <property name="javaFormatter" value="org.mybatis.generator.api.dom.DefaultJavaFormatter"/>
        <!-- 格式化XML代码 -->
        <property name="xmlFormatter" value="org.mybatis.generator.api.dom.DefaultXmlFormatter"/>

        <property name="beginningDelimiter" value="`"/>
        <property name="endingDelimiter" value="`"/>

        <plugin type="tk.mybatis.mapper.generator.MapperPlugin">
            <property name="mappers" value="BaseMapper"/>
            <property name="forceAnnotation" value="true"/>
            <property name="caseSensitive" value="true"/>
            <!--<property name="generateColumnConsts" value="true"/>-->
            <property name="lombok" value="Getter,Setter"/>
        </plugin>
        <!-- 不生成注释 -->
        <commentGenerator>
            <property name="suppressAllComments" value="true"/>
            <property name="suppressDate" value="true"/>
        </commentGenerator>

        <!-- JDBC连接配置 -->
        <jdbcConnection driverClass="com.mysql.jdbc.Driver"
                        connectionURL="jdbc:mysql://10.24.126.37:3306/tktcenter" userId="tktcenteruser" password="TktCenter.135!"/>

        <!--
            Java类型处理器
            用于处理DB中的类型到Java中的类型,默认使用JavaTypeResolverDefaultImpl
            注意一点,默认会先尝试使用Integer,Long,Short等来对应DECIMAL和NUMERIC数据类型
        -->
        <javaTypeResolver>
            <!--
                true:使用BigDecimal对应DECIMAL和 NUMERIC数据类型
                false:默认
                scale>0;length>18:使用BigDecimal
                scale=0;length[10,18]:使用Long
                scale=0;length[5,9]:使用Integer
                scale=0;length<5:使用Short
            -->
            <property name="forceBigDecimals" value="true"/>
        </javaTypeResolver>

        <!--
            Java模型创建器,是必须要的元素
            负责:
            1. key类(见context的defaultModelType)
            2. java类
            3. 查询类
            targetPackage:生成的类要放的包,真实的包受enableSubPackages属性控制
            targetProject:目标项目,指定一个存在的目录下,生成的内容会放到指定目录中,如果目录不存在,MBG不会自动建目录
        -->
        <javaModelGenerator targetPackage="com.mtl.cypw.ticket.model"
                            targetProject="src/main/java">

            <!-- 自动为每一个生成的类创建一个构造方法,构造方法包含了所有的field,而不是使用setter -->
            <!--<property name="constructorBased" value="false"/>-->

            <!-- 在targetPackage的基础上,根据数据库的schema再生成一层package,最终生成的类放在这个package下,默认为false -->
            <property name="enableSubPackages" value="false"/>

            <!--
                是否创建一个不可变的类，如果为true
                那么MBG会创建一个没有setter方法的类,取而代之的是类似constructorBased的类
            -->
            <property name="immutable" value="false"/>

            <!--
                设置一个根对象
                如果设置了这个根对象,那么生成的keyClass或者recordClass会继承这个类,在Table的rootClass属性中可以覆盖该选项
                注意:
                如果在key class或者record class中有root class相同的属性,MBG就不会重新生成这些属性了,包括：
                1. 属性名相同,类型相同,有相同的getter/setter方法
             -->
            <property name="rootClass" value="com.mtl.cypw.common.core.tkmybatis.BaseModel"/>

            <!-- 设置是否在getter方法中，对String类型字段调用trim()方法 -->
            <property name="trimStrings" value="false"/>
        </javaModelGenerator>

        <!--
            生成SQL map的XML文件生成器
            注意,在Mybatis3之后,我们可以使用mapper.xml文件+Mapper接口(或者不用mapper接口)
            或者只使用Mapper接口+Annotation,所以,如果javaClientGenerator配置中配置了需要生成XML的话,这个元素就必须配置
            targetPackage/targetProject:同javaModelGenerator
        -->
        <sqlMapGenerator targetPackage="mapper"
                         targetProject="src/main/resources">
            <!-- 在targetPackage的基础上,根据数据库的schema再生成一层package,最终生成的类放在这个package下,默认为false -->
            <property name="enableSubPackages" value="false"/>
        </sqlMapGenerator>

        <!--
            对于mybatis来说,即生成Mapper接口
            注意,如果没有配置该元素,那么默认不会生成Mapper接口
            targetPackage/targetProject:同javaModelGenerator
            type:选择怎么生成mapper接口(在MyBatis3/MyBatis3Simple下)
            1. ANNOTATEDMAPPER:会生成使用Mapper接口+Annotation的方式创建(SQL生成在annotation中)不会生成对应的XML
            2. MIXEDMAPPER:使用混合配置,会生成Mapper接口,并适当添加合适的Annotation,但是XML会生成在XML中
            3. XMLMAPPER:会生成Mapper接口,接口完全依赖XML
            注意,如果context是MyBatis3Simple:只支持ANNOTATEDMAPPER和XMLMAPPER
        -->
        <javaClientGenerator type="XMLMAPPER" targetPackage="com.mtl.cypw.ticket.mapper"
                             targetProject="src/main/java">
            <!-- 在targetPackage的基础上,根据数据库的schema再生成一层package,最终生成的类放在这个package下,默认为false -->
            <property name="enableSubPackages" value="false"/>
        </javaClientGenerator>

        <!--<table tableName="cy_check_stats" domainObjectName="CheckStats" enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--<property name="useActualColumnNames" value="false"/>-->
            <!--<ignoreColumn column="update_time"/>-->
            <!--<ignoreColumn column="create_time"/>-->
            <!--<ignoreColumn column="deleted"/>-->
        <!--</table>-->

        <!--<table tableName="cy_check_record" domainObjectName="CheckRecord" enableCountByExample="false"-->
               <!--enableUpdateByExample="false"-->
               <!--enableDeleteByExample="false"-->
               <!--enableSelectByExample="false"-->
               <!--selectByExampleQueryId="false">-->
            <!--<property name="useActualColumnNames" value="false"/>-->
            <!--<ignoreColumn column="update_time"/>-->
            <!--<ignoreColumn column="create_time"/>-->
            <!--<ignoreColumn column="deleted"/>-->
        <!--</table>-->

        <table tableName="cy_fetch_voucher" domainObjectName="FetchVoucher" enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
            <ignoreColumn column="update_time"/>
            <ignoreColumn column="create_time"/>
            <ignoreColumn column="deleted"/>
        </table>

        <table tableName="cy_fetch_voucher_detail" domainObjectName="FetchVoucherDetail" enableCountByExample="false"
               enableUpdateByExample="false"
               enableDeleteByExample="false"
               enableSelectByExample="false"
               selectByExampleQueryId="false">
            <property name="useActualColumnNames" value="false"/>
            <ignoreColumn column="update_time"/>
            <ignoreColumn column="create_time"/>
            <ignoreColumn column="deleted"/>
        </table>

    </context>
</generatorConfiguration>